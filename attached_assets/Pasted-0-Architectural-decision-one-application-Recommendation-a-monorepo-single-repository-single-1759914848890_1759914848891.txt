0) Architectural decision (“one application”)

Recommendation: a monorepo (single repository, single domain) with two runtimes:

Backend: Laravel 12 + Filament v4 (admin/back-office panel, API, auth, RBAC, label printing, integrations).

Frontend: Next.js 15 + Tailwind (UI “Filament-like”), Lucide.

Shared auth: Laravel Sanctum (session cookie, same domain), CORS + CSRF correctly configured.

Domain routing (reverse proxy): /admin and /api/* → Laravel; / (everything else) → Next.

Tooling: pnpm/turborepo

If you ever want a “single runtime,” we can switch the frontend to Inertia (React) inside Laravel — for now we stay with Next 15.

1) Conventions & constraints (apply to every prompt)

UI copy in English (menu: Planning, Production, Technical; all other names in English).

Style: “Filament-like” (neutral/slate), font-size: 10px (1rem = 10px), dark left sidebar, topbar with search and user avatar.

Icons: Lucide.

UX: simple, consistent layout; tables look the same across the app (sort, filter, pagination).

Frontend structure: Next 15 (app router), pages: /planning, /production, /technical, (later /scanner).

RBAC: roles (Operator, Planner, Technical, Purchasing, Warehouse, QC, Admin).

Languages: TypeScript (frontend), PHP 8.3+ (backend).

2) Monorepo structure (to be generated by the agent)

/apps/backend – Laravel 12 + Filament v4

/apps/frontend – Next 15 + Tailwind

/packages/shared – contracts (OpenAPI/TS types), utils, icon components, Zod schemas

/infra – docker/nginx/compose, CI/CD

AC (acceptance criteria): Repo builds locally; reverse proxy routes /admin and /api/* to backend, everything else to frontend; Sanctum login works.

3) GLOBAL PROMPT – project initialization

Use when: you want the agent to scaffold the entire monorepo.

Prompt:

Context: Build the “Forza” monorepo. Frontend: Next.js 15 (app router, Tailwind, Lucide, neutral Filament-like, base font 10px). Backend: Laravel 12 with Filament v4, Sanctum, Postgres. One domain; reverse proxy: /admin and /api/* → Laravel, everything else → Next. Session authentication (Sanctum) and CORS/CSRF correctly configured for the frontend under the same domain.
Task: Create folder structure, config files, basic pages (frontend) and a minimal Filament panel (backend). Also create a README with run instructions.
Requirements:

apps/backend: Laravel 12, Filament v4, Sanctum, migrations for users/roles/permissions.

apps/frontend: Next 15, Tailwind, Lucide; layout: topbar (search + avatar + settings/logout), dark left sidebar, home with 3 tiles generated from sections = [Planning, Production, Technical].

packages/shared: placeholder OpenAPI contracts + TS types.

infra: docker compose (postgres, nginx), reverse proxy config.
AC: local login (Sanctum) works, /admin (Filament) is accessible, / renders home tiles, /planning, /production, /technical exist.

4) GLOBAL PROMPT – authentication & RBAC

Use when: you want the agent to build end-to-end auth.

Prompt:

Configure Laravel Sanctum for session login with Next 15 under the same domain. Add roles (Operator, Planner, Technical, Purchasing, Warehouse, QC, Admin) and authorization policies. Generate endpoints: /api/auth/csrf, /api/auth/login, /api/auth/logout, /api/me. On the frontend: auth provider, 401 interception, redirect to /login. Topbar must show user name + initials (avatar). AC: After login, httpOnly cookie works, /api/me returns the correct user, components hide actions without permission.

5) GLOBAL PROMPT – layout & navigation (frontend)

Prompt:

Build a Next 15 (app router) layout with: Topbar (search input + user avatar + Settings/Logout), left Sidebar (dark slate) with items: Planning, Production, Technical. Use Lucide icons. On /, render tiles from sections (title, description, link). Keep font-size: 10px. AC: every page shares the same topbar and sidebar, Home renders tiles from the array, styles match a “Filament-like” look.

6) GLOBAL PROMPT – global search (topbar)

Prompt:

Implement global Search in the topbar: backend endpoint /api/search?q= searches across Work Orders (WO), License Plates (LP), Batches (lot), Products (SKU). Add fuzziness and permission checks. On the frontend: command palette (Ctrl+K) + results dropdown. AC: typing returns paginated results labeled with type (WO/LP/lot/SKU) and a link to details.

7) DOMAIN PROMPTS – models & migrations (backend)

Prompt (Work Orders & core entities):

In Laravel 12, create models + migrations: WorkOrder, Product, BOM, BOMItem, Batch, LicensePlate, Location, StockMove, Machine, ECN, Calibration, PurchaseOrder, POItem, SalesOrder, SOItem, QCEvent. Define relationships and indexes (lot, LP, status, line_id, dates). Add minimal seeders. AC: migrations pass, Eloquent relations are complete, seeders create sample data.

Prompt (Filament v4 Resources):

For key entities (Product, BOM, WorkOrder, PurchaseOrder, SalesOrder, Machine) generate Filament Resources: lists, forms, filters, bulk actions, policies. Keep the look clean (“Filament-like”). AC: /admin renders lists and forms correctly.

8) PLANNING – prompts

Prompt (Planning List):

Create the /planning page (Next): Work Orders table with columns: WO#, SKU, Line, Qty planned (boxes), Due date, Status, Shortages. Add filters: line, date, status. Actions: Schedule, Recalculate MRP, Open WO. AC: clicking Open WO navigates to the Work Order details.

Prompt (WO Details + MRP):

Create /production/wo/[id] with tabs: Overview, Materials (MRP), Activity, Labels.

The MRP tab calculates: PR_needed, RM_needed using formulas:
PR_needed = (boxes × packs_per_box × pack_net_wt) / yield_cut;
RM_needed = PR_needed / (yield_trim × (1 + gain_marinate) × (1 − shrink_smoke) × yield_dice).

Show availability: PR_stock, RM_stock, shortages.

Action: Create WO-Process if PR is short. AC: calculations are correct; the button creates a linked WO-Process via API.

9) PRODUCTION – prompts

Prompt (Process Terminal):

logic ok WO is work order send by planing with status realise go to production. that order we can scan to it component what we need to create item so on process 
scan RM -> to create PR if there is need to have it take from specyfic location  like process.
on lines: you need to scan 
box, meat, webs, labels -> and that allow us to create finish product. 
a there need to be option scan to order. 
system should not allow scan something what is not in order. 


Build a “Process” terminal page (kiosk) at /production/process: list of WO what i need to select, to scan fields for RM LP, input for quantities (kg), checkboxes marinate/smoke/dice, resulting PR (kg), waste/trim log, PR label printing (LP). Actions: Start, Pause, Complete. AC: persists consumptions to wo_consumptions and outputs to wo_outputs, generates LP and PR labels.


Prompt (Pack Terminal):

Build a “Pack” terminal page (kiosk) at /production/pack: scan PR (LP), count packs/boxes, PR returns, waste, pack/box label printing. AC: records packs_out, boxes_out, updates PR/FG inventory, prints box labels (GS1-128).

10) TECHNICAL – prompts

Prompt (BOM):

Create /technical/bom — a BOM editor (Product → BOM items): PACK and BOX (packaging), PR (from RM and glaze). Support BOM versioning and activation. AC: the active BOM version is unique per product; the API returns it for MRP.

Prompt (ECN/Change Control):

Create /technical/ecn: change list, workflow Draft → Review → Approved → Released, reason field, linked BOM and go-live date. AC: activating an ECN switches the active BOM version.

Prompt (Machines & Calibrations):

Create /technical/machines: list of machines/lines (Line 14, etc.), calibration cards, due dates. AC: calibration alerts appear on the Planning dashboard.

11) WAREHOUSE & TRACE – prompts (to enable when warehouse goes in)

Prompt (GRN/Putaway/Transfer):

Backend: endpoints for GRN (from PO), putaway, transfers, cycle counts. Frontend: /warehouse/grn, /warehouse/putaway, /warehouse/transfer. AC: LP and locations are updated, history in stock_moves.

Prompt (Trace):

Page /trace: search by LP/lot and draw the chain: RM → PR → Pack → Box (with WO links). AC: each stage shows LP/lot and timestamps.

12) SEARCH – backend + frontend prompt

Prompt:

Backend: /api/search with q param, typed result (WO/LP/lot/SKU), pagination, permissions. Frontend: useGlobalSearch hook, command palette (Ctrl+K), results dropdown with Lucide icons. AC: ~150ms response on local data, unit tests included.

13) OPENAPI & SHARED TYPES – prompt

Prompt:

Generate OpenAPI 3.1 for core endpoints: auth, products, bom, work-orders, consumptions, outputs, labels, purchase-orders, stock. Then build /packages/shared with:

generated TS types (from OpenAPI),

Zod schemas for frontend validation,

an API client with retry and 401 handling.
AC: generators run, types are consumed by frontend fetchers.

14) UI TABLE – prompt

Prompt:

Build a generic table component (TypeScript, Next 15) with: declarative columns, sort, filter, pagination, batch actions, row actions, empty state. Style it “Filament-like.” AC: all lists (WO, BOM, Machines) use this single component.

15) SCANNER – prompt (draft, for later)

Prompt:

Create /scanner with a separate menu (kiosk mode): single input with auto-focus (HID), code prefix mapping (LP, lot, SKU), success/error sounds, last 20 scans. AC: integrates with /api/stock/lp/{code} and contextual actions (move, lookup).

16) LOGGING, AUDIT, SECURITY – prompt

Prompt:

Add an audit trail (who/what/when/where) for key tables; API logs (request id, correlation id), rate-limit sensitive endpoints, CORS policy, SameSite and Secure cookies. AC: critical events are logged and visible in the Filament panel.

17) TESTS & SEEDERS – prompt

Prompt:

Prepare seeders: sample SKUs, BOM, machines (Line 14), WO (Pack 200 boxes), PR/RM inventory. Tests: unit (MRP formulas), integration (Process/Pack flow), e2e (login → create WO-Process → scan → label). AC: all tests pass locally.

18) CI/CD & INFRA – prompt

Prompt:

Prepare files under /infra: Docker Compose (Postgres, Redis, Nginx, php-fpm, Next), Nginx conf (proxy /admin and /api/* → Laravel; everything else → Next), CI pipeline (lint/test/build), migrations on deploy, storage for labels. AC: docker compose up brings up the whole stack locally with working login.

19) MVP ACCEPTANCE CHECKLIST

Login (Sanctum) and roles work; Topbar/Sidebar consistent.

Home renders 3 tiles from the data array.

Planning: WO list + WO details with MRP calc and Create WO-Process action.

Production: Process and Pack terminals record consumptions/outputs and print labels.

Technical: BOM editing with versioning + ECN workflow + machines/calibrations.

Global Search (WO/LP/lot/SKU) works.

OpenAPI + shared types are consumed by the frontend.

Logs and audit are available in the Filament panel.

20) Final notes

All UI labels in English.

Layout and style “Filament-like,” neutral (slate), font-size 10px.

Lucide icons.

/scanner as a separate module in a later iteration.